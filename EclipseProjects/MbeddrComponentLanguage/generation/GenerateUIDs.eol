// This script implements Dijkstra"s shortest 
// path algorighm
var layerId = 0;

for (layer in Layer.allInstances) {
	("Processing layer" + layer.name + "...").println();
	
	layer.description = "layer_" + layerId;
	
	layer.name = "layer_" + layerId;
	
	var ruleId = 0;
	for (rule in layer.hasRule) {
		("Processing rule " + rule.description + "...").println();
		
		rule.description = layer.name + "_rule_" + ruleId;
		
		var classId = 0;
		
		for (match in rule.match){
			for(class in match.class){
				processClass(class, classId, rule.description);
				classId = classId + 1;
			}
		}
		
		for (class in rule.apply.class){
			processClass(class, classId, rule.description);
			classId = classId + 1;
		}
		
		("Rule " + rule.description + " processed.").println();
		
		ruleId = ruleId + 1;
	}
	
	
	
	("Layer " + layer.name + " processed.").println();
	
	layerId = layerId + 1;
}


("Validating layer ids...").println();
for (x in Layer.allInstances) {
	for (y in Layer.allInstances) {
		if (x.name == y.name and x <> y){
			("!!!!Duplicate name found: " + x.name).println();
		}
	}
}
("Validating layer ids... DONE").println();

("Validating rule ids...").println();
for (x in Rule.allInstances) {
	for (y in Rule.allInstances) {
		if (x.description == y.description and x <> y){
			("!!!!Duplicate description found: " + x.description).println();
		}
	}
}
("Validating rule ids... DONE").println();

("Validating class ids...").println();
for (x in AbstractClass.allInstances) {
	for (y in AbstractClass.allInstances) {
		if (x.id == y.id and x <> y){
			("!!!!Duplicate id found: " + x.id).println();
		}
	}
}
("Validating class ids... DONE").println();

("Validating attribute ids...").println();
for (x in Attribute.allInstances) {
	for (y in Attribute.allInstances) {
		if (x.id == y.id and x <> y){
			("!!!!Duplicate id found: " + x.id).println();
		}
	}
}
("Validating attribute ids... DONE").println();







operation processClass(class, classId, rule_description){
	("Processing class " + class.id + "...").println();
	
	class.id = rule_description + "_class_" + classId;
	
	class.description = rule_description + "_class_" + classId;
	
	var attributeId = 0;
	for (attribute in class.attribute){
		("Processing attribute " + attribute.id + "...").println();
		
		attribute.id = class.id + "_attribute_" + attributeId;
		
		attribute.description = class.id + "_attribute_" + attributeId;
		
		("Attribute " + attribute.id + " processed.").println();
		
		attributeId = attributeId + 1;
	}
	
	("Class " + class.id + " processed.").println();
}
