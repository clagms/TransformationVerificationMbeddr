<?xml version="1.0" encoding="UTF-8"?>
<dsltrans:TransformationModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dsltrans="http://dsltrans/2.0">
  <source xsi:type="dsltrans:FilePort" name="inputModel" filePathURI="model/ComponentsSample.xmi">
    <metaModelId metaModelURI="model/Module.ecore" metaModelName="Module.Module"/>
  </source>
  <source xsi:type="dsltrans:Sequential" description="Header contents: Main declarations" previousSource="//@source.0" outputFilePathURI="model/ComponentsSampleInC.xmi" groupName="">
    <metaModelId metaModelURI="model/C.ecore" metaModelName="CModel.CModel"/>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule" id="">
          <attribute attributeName="name"/>
        </class>
      </match>
      <apply>
        <class packageName="CModel" className="ImplementationModule" id="">
          <attribute attributeName="">
            <attributeValue xsi:type="dsltrans:Atom" value="ImplementationModule"/>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.0/@match.0/@class.0/@attribute.0"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ClientServerInterface">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule">
          <attribute attributeName="name"/>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.1/@hasRule.1/@match.0/@class.1" target="//@source.1/@hasRule.1/@match.0/@class.0"/>
      </match>
      <apply>
        <class packageName="CModel" className="StructDeclaration">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.1/@match.0/@class.1/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Concat">
                <leftTerm xsi:type="dsltrans:Atom" value="_"/>
                <rightTerm xsi:type="dsltrans:Concat">
                  <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.1/@match.0/@class.0/@attribute.0"/>
                  <rightTerm xsi:type="dsltrans:Concat">
                    <leftTerm xsi:type="dsltrans:Atom" value="__"/>
                    <rightTerm xsi:type="dsltrans:Atom" value="idata"/>
                  </rightTerm>
                </rightTerm>
              </rightTerm>
            </attributeValue>
          </attribute>
          <attribute attributeName="">
            <attributeValue xsi:type="dsltrans:Atom" value="ClientServerStructIData"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Operation">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ClientServerInterface"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.1/@hasRule.2/@match.0/@class.1" target="//@source.1/@hasRule.2/@match.0/@class.0"/>
      </match>
      <apply>
        <class packageName="CModel" className="CFunctionPointerStructMember">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.2/@match.0/@class.0/@attribute.0"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="CFunctionPointerStructMember"/>
          </attribute>
        </class>
        <class packageName="CModel" className="FunctionRefType">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="FunctionRefType"/>
          </attribute>
        </class>
        <association associationName="type" source="//@source.1/@hasRule.2/@apply/@class.0" target="//@source.1/@hasRule.2/@apply/@class.1"/>
      </apply>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="StringType"/>
      </match>
      <apply>
        <class packageName="CModel" className="StringType">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="StringType"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="VoidType"/>
      </match>
      <apply>
        <class packageName="CModel" className="VoidType">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="VoidType"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Operation"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ClientServerInterface"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.1/@hasRule.5/@match.0/@class.1" target="//@source.1/@hasRule.5/@match.0/@class.0"/>
      </match>
      <apply>
        <class packageName="CModel" className="PointerType">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="InstancePointer"/>
          </attribute>
        </class>
        <class packageName="CModel" className="VoidType"/>
        <association associationName="baseType" source="//@source.1/@hasRule.5/@apply/@class.0" target="//@source.1/@hasRule.5/@apply/@class.1"/>
      </apply>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ClientServerInterface">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule">
          <attribute attributeName="name"/>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.1/@hasRule.6/@match.0/@class.1" target="//@source.1/@hasRule.6/@match.0/@class.0"/>
      </match>
      <apply>
        <class packageName="CModel" className="TypeDef">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.6/@match.0/@class.1/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Concat">
                <leftTerm xsi:type="dsltrans:Atom" value="_"/>
                <rightTerm xsi:type="dsltrans:Concat">
                  <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.6/@match.0/@class.0/@attribute.0"/>
                  <rightTerm xsi:type="dsltrans:Concat">
                    <leftTerm xsi:type="dsltrans:Atom" value="__"/>
                    <rightTerm xsi:type="dsltrans:Atom" value="idata_t"/>
                  </rightTerm>
                </rightTerm>
              </rightTerm>
            </attributeValue>
          </attribute>
          <attribute attributeName="">
            <attributeValue xsi:type="dsltrans:Atom" value="TypeDefInterfaceStruct"/>
          </attribute>
        </class>
        <class packageName="CModel" className="StructType">
          <attribute attributeName="">
            <attributeValue xsi:type="dsltrans:Atom" value="TypeDefInterfaceStructType"/>
          </attribute>
        </class>
        <association associationName="original" source="//@source.1/@hasRule.6/@apply/@class.0" target="//@source.1/@hasRule.6/@apply/@class.1"/>
      </apply>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="AtomicComponent">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule">
          <attribute attributeName="name"/>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.1/@hasRule.7/@match.0/@class.1" target="//@source.1/@hasRule.7/@match.0/@class.0"/>
      </match>
      <apply>
        <class packageName="CModel" className="StructDeclaration">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.7/@match.0/@class.1/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Concat">
                <leftTerm xsi:type="dsltrans:Atom" value="_"/>
                <rightTerm xsi:type="dsltrans:Concat">
                  <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.7/@match.0/@class.0/@attribute.0"/>
                  <rightTerm xsi:type="dsltrans:Concat">
                    <leftTerm xsi:type="dsltrans:Atom" value="__"/>
                    <rightTerm xsi:type="dsltrans:Atom" value="cdata"/>
                  </rightTerm>
                </rightTerm>
              </rightTerm>
            </attributeValue>
          </attribute>
          <attribute attributeName="">
            <attributeValue xsi:type="dsltrans:Atom" value="AtomicComponentStructCData"/>
          </attribute>
        </class>
        <class packageName="CModel" className="Member">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="aMemberSoTheStructIsNotEmpty"/>
          </attribute>
        </class>
        <class packageName="CModel" className="Int32Type"/>
        <association associationName="members" source="//@source.1/@hasRule.7/@apply/@class.0" target="//@source.1/@hasRule.7/@apply/@class.1"/>
        <association associationName="type" source="//@source.1/@hasRule.7/@apply/@class.1" target="//@source.1/@hasRule.7/@apply/@class.2"/>
      </apply>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="AtomicComponent">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule">
          <attribute attributeName="name"/>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.1/@hasRule.8/@match.0/@class.1" target="//@source.1/@hasRule.8/@match.0/@class.0"/>
      </match>
      <apply>
        <class packageName="CModel" className="TypeDef">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.8/@match.0/@class.1/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Concat">
                <leftTerm xsi:type="dsltrans:Atom" value="_"/>
                <rightTerm xsi:type="dsltrans:Concat">
                  <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.8/@match.0/@class.0/@attribute.0"/>
                  <rightTerm xsi:type="dsltrans:Concat">
                    <leftTerm xsi:type="dsltrans:Atom" value="__"/>
                    <rightTerm xsi:type="dsltrans:Atom" value="cdata_t"/>
                  </rightTerm>
                </rightTerm>
              </rightTerm>
            </attributeValue>
          </attribute>
          <attribute attributeName="">
            <attributeValue xsi:type="dsltrans:Atom" value="TypeDefComponentStruct"/>
          </attribute>
        </class>
        <class packageName="CModel" className="StructType">
          <attribute attributeName="">
            <attributeValue xsi:type="dsltrans:Atom" value="TypeComponentStructType"/>
          </attribute>
        </class>
        <association associationName="original" source="//@source.1/@hasRule.8/@apply/@class.0" target="//@source.1/@hasRule.8/@apply/@class.1"/>
      </apply>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="RequiredPort">
          <attribute attributeName="name"/>
        </class>
      </match>
      <apply>
        <class packageName="CModel" className="Member">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.9/@match.0/@class.0/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Atom" value="__port"/>
            </attributeValue>
          </attribute>
          <attribute attributeName="">
            <attributeValue xsi:type="dsltrans:Atom" value="RequiredPort_port"/>
          </attribute>
        </class>
        <class packageName="CModel" className="VoidType"/>
        <class packageName="CModel" className="PointerType"/>
        <association associationName="type" source="//@source.1/@hasRule.9/@apply/@class.0" target="//@source.1/@hasRule.9/@apply/@class.2"/>
        <association associationName="baseType" source="//@source.1/@hasRule.9/@apply/@class.2" target="//@source.1/@hasRule.9/@apply/@class.1"/>
      </apply>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="RequiredPort">
          <attribute attributeName="name"/>
        </class>
      </match>
      <apply>
        <class packageName="CModel" className="Member">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.10/@match.0/@class.0/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Atom" value="__ops"/>
            </attributeValue>
          </attribute>
          <attribute attributeName="">
            <attributeValue xsi:type="dsltrans:Atom" value="RequiredPort_ops"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ProvidedPort">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="AtomicComponent">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ClientServerInterface"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Operation">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule">
          <attribute attributeName="name"/>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.1/@hasRule.11/@match.0/@class.1" target="//@source.1/@hasRule.11/@match.0/@class.0"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="intf" source="//@source.1/@hasRule.11/@match.0/@class.0" target="//@source.1/@hasRule.11/@match.0/@class.2"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.1/@hasRule.11/@match.0/@class.2" target="//@source.1/@hasRule.11/@match.0/@class.3"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.1/@hasRule.11/@match.0/@class.4" target="//@source.1/@hasRule.11/@match.0/@class.1"/>
      </match>
      <apply>
        <class packageName="CModel" className="FunctionPrototype">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.11/@match.0/@class.4/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Concat">
                <leftTerm xsi:type="dsltrans:Atom" value="_"/>
                <rightTerm xsi:type="dsltrans:Concat">
                  <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.11/@match.0/@class.1/@attribute.0"/>
                  <rightTerm xsi:type="dsltrans:Concat">
                    <leftTerm xsi:type="dsltrans:Atom" value="_"/>
                    <rightTerm xsi:type="dsltrans:Concat">
                      <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.11/@match.0/@class.0/@attribute.0"/>
                      <rightTerm xsi:type="dsltrans:Concat">
                        <leftTerm xsi:type="dsltrans:Atom" value="_"/>
                        <rightTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.11/@match.0/@class.3/@attribute.0"/>
                      </rightTerm>
                    </rightTerm>
                  </rightTerm>
                </rightTerm>
              </rightTerm>
            </attributeValue>
          </attribute>
          <attribute attributeName="">
            <attributeValue xsi:type="dsltrans:Atom" value="ProvidedPortFunctionPrototype"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
  </source>
  <source xsi:type="dsltrans:Sequential" description="Header contents: Main declarations" previousSource="//@source.1" outputFilePathURI="model/ComponentsSampleInC.xmi">
    <metaModelId metaModelURI="model/C.ecore" metaModelName="CModel.CModel"/>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ClientServerInterface"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.2/@hasRule.0/@match.0/@class.0" target="//@source.2/@hasRule.0/@match.0/@class.1"/>
      </match>
      <apply>
        <class packageName="CModel" className="ImplementationModule">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ImplementationModule"/>
          </attribute>
        </class>
        <class packageName="CModel" className="StructDeclaration">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ClientServerStructIData"/>
          </attribute>
        </class>
        <association associationName="contents" source="//@source.2/@hasRule.0/@apply/@class.0" target="//@source.2/@hasRule.0/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.0/@apply/@class.0" sourceClass="//@source.2/@hasRule.0/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.0/@apply/@class.1" sourceClass="//@source.2/@hasRule.0/@match.0/@class.1"/>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ClientServerInterface"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Operation"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.2/@hasRule.1/@match.0/@class.0" target="//@source.2/@hasRule.1/@match.0/@class.1"/>
      </match>
      <apply>
        <class packageName="CModel" className="StructDeclaration">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ClientServerStructIData"/>
          </attribute>
        </class>
        <class packageName="CModel" className="CFunctionPointerStructMember">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="CFunctionPointerStructMember"/>
          </attribute>
        </class>
        <association associationName="members" source="//@source.2/@hasRule.1/@apply/@class.0" target="//@source.2/@hasRule.1/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.1/@apply/@class.1" sourceClass="//@source.2/@hasRule.1/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.1/@apply/@class.0" sourceClass="//@source.2/@hasRule.1/@match.0/@class.0"/>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Operation"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="VoidType"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="type" source="//@source.2/@hasRule.2/@match.0/@class.0" target="//@source.2/@hasRule.2/@match.0/@class.1"/>
      </match>
      <apply>
        <class packageName="CModel" className="FunctionRefType">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="FunctionRefType"/>
          </attribute>
        </class>
        <class packageName="CModel" className="VoidType">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="VoidType"/>
          </attribute>
        </class>
        <association associationName="returnType" source="//@source.2/@hasRule.2/@apply/@class.0" target="//@source.2/@hasRule.2/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.2/@apply/@class.1" sourceClass="//@source.2/@hasRule.2/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.2/@apply/@class.0" sourceClass="//@source.2/@hasRule.2/@match.0/@class.0"/>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Operation"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="StringType"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="type" source="//@source.2/@hasRule.3/@match.0/@class.0" target="//@source.2/@hasRule.3/@match.0/@class.1"/>
      </match>
      <apply>
        <class packageName="CModel" className="FunctionRefType">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="FunctionRefType"/>
          </attribute>
        </class>
        <class packageName="CModel" className="StringType">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="StringType"/>
          </attribute>
        </class>
        <association associationName="returnType" source="//@source.2/@hasRule.3/@apply/@class.0" target="//@source.2/@hasRule.3/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.3/@apply/@class.1" sourceClass="//@source.2/@hasRule.3/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.3/@apply/@class.0" sourceClass="//@source.2/@hasRule.3/@match.0/@class.0"/>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Operation"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="OperationParameter"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="StringType"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="parameters" source="//@source.2/@hasRule.4/@match.0/@class.0" target="//@source.2/@hasRule.4/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="type" source="//@source.2/@hasRule.4/@match.0/@class.1" target="//@source.2/@hasRule.4/@match.0/@class.2"/>
      </match>
      <apply>
        <class packageName="CModel" className="FunctionRefType">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="FunctionRefType"/>
          </attribute>
        </class>
        <class packageName="CModel" className="StringType">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="StringType"/>
          </attribute>
        </class>
        <association associationName="argTypes" source="//@source.2/@hasRule.4/@apply/@class.0" target="//@source.2/@hasRule.4/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.4/@apply/@class.1" sourceClass="//@source.2/@hasRule.4/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.4/@apply/@class.0" sourceClass="//@source.2/@hasRule.4/@match.0/@class.0"/>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ClientServerInterface"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.2/@hasRule.5/@match.0/@class.0" target="//@source.2/@hasRule.5/@match.0/@class.1"/>
      </match>
      <apply>
        <class packageName="CModel" className="ImplementationModule">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ImplementationModule"/>
          </attribute>
        </class>
        <class packageName="CModel" className="TypeDef">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="TypeDefInterfaceStruct"/>
          </attribute>
        </class>
        <association associationName="contents" source="//@source.2/@hasRule.5/@apply/@class.0" target="//@source.2/@hasRule.5/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.5/@apply/@class.0" sourceClass="//@source.2/@hasRule.5/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.5/@apply/@class.1" sourceClass="//@source.2/@hasRule.5/@match.0/@class.1"/>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ClientServerInterface"/>
      </match>
      <apply>
        <class packageName="CModel" className="StructDeclaration">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ClientServerStructIData"/>
          </attribute>
        </class>
        <class packageName="CModel" className="StructType">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="TypeDefInterfaceStructType"/>
          </attribute>
        </class>
        <association associationName="struct" source="//@source.2/@hasRule.6/@apply/@class.1" target="//@source.2/@hasRule.6/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.6/@apply/@class.1" sourceClass="//@source.2/@hasRule.6/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.6/@apply/@class.0" sourceClass="//@source.2/@hasRule.6/@match.0/@class.0"/>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="AtomicComponent"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.2/@hasRule.7/@match.0/@class.0" target="//@source.2/@hasRule.7/@match.0/@class.1"/>
      </match>
      <apply>
        <class packageName="CModel" className="ImplementationModule">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ImplementationModule"/>
          </attribute>
        </class>
        <class packageName="CModel" className="StructDeclaration">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="AtomicComponentStructCData"/>
          </attribute>
        </class>
        <association associationName="contents" source="//@source.2/@hasRule.7/@apply/@class.0" target="//@source.2/@hasRule.7/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.7/@apply/@class.0" sourceClass="//@source.2/@hasRule.7/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.7/@apply/@class.1" sourceClass="//@source.2/@hasRule.7/@match.0/@class.1"/>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="AtomicComponent"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.2/@hasRule.8/@match.0/@class.0" target="//@source.2/@hasRule.8/@match.0/@class.1"/>
      </match>
      <apply>
        <class packageName="CModel" className="ImplementationModule">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ImplementationModule"/>
          </attribute>
        </class>
        <class packageName="CModel" className="TypeDef">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="TypeDefComponentStruct"/>
          </attribute>
        </class>
        <association associationName="contents" source="//@source.2/@hasRule.8/@apply/@class.0" target="//@source.2/@hasRule.8/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.8/@apply/@class.0" sourceClass="//@source.2/@hasRule.8/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.8/@apply/@class.1" sourceClass="//@source.2/@hasRule.8/@match.0/@class.1"/>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="AtomicComponent"/>
      </match>
      <apply>
        <class packageName="CModel" className="StructDeclaration">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="AtomicComponentStructCData"/>
          </attribute>
        </class>
        <class packageName="CModel" className="StructType">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="TypeComponentStructType"/>
          </attribute>
        </class>
        <association associationName="struct" source="//@source.2/@hasRule.9/@apply/@class.1" target="//@source.2/@hasRule.9/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.9/@apply/@class.1" sourceClass="//@source.2/@hasRule.9/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.9/@apply/@class.0" sourceClass="//@source.2/@hasRule.9/@match.0/@class.0"/>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="AtomicComponent"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="RequiredPort"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.2/@hasRule.10/@match.0/@class.0" target="//@source.2/@hasRule.10/@match.0/@class.1"/>
      </match>
      <apply>
        <class packageName="CModel" className="StructDeclaration">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="AtomicComponentStructCData"/>
          </attribute>
        </class>
        <class packageName="CModel" className="Member">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="RequiredPort_port"/>
          </attribute>
        </class>
        <class packageName="CModel" className="Member">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="RequiredPort_ops"/>
          </attribute>
        </class>
        <association associationName="members" source="//@source.2/@hasRule.10/@apply/@class.0" target="//@source.2/@hasRule.10/@apply/@class.1"/>
        <association associationName="members" source="//@source.2/@hasRule.10/@apply/@class.0" target="//@source.2/@hasRule.10/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.10/@apply/@class.0" sourceClass="//@source.2/@hasRule.10/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.10/@apply/@class.1" sourceClass="//@source.2/@hasRule.10/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.10/@apply/@class.2" sourceClass="//@source.2/@hasRule.10/@match.0/@class.1"/>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ClientServerInterface"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="RequiredPort"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="intf" source="//@source.2/@hasRule.11/@match.0/@class.1" target="//@source.2/@hasRule.11/@match.0/@class.0"/>
      </match>
      <apply>
        <class packageName="CModel" className="TypeDef">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="TypeDefInterfaceStruct"/>
          </attribute>
        </class>
        <class packageName="CModel" className="Member">
          <attribute attributeName="">
            <attributeValue xsi:type="dsltrans:Atom" value="RequiredPort_ops"/>
          </attribute>
        </class>
        <class packageName="CModel" className="PointerType"/>
        <class packageName="CModel" className="TypeDefType"/>
        <association associationName="type" source="//@source.2/@hasRule.11/@apply/@class.1" target="//@source.2/@hasRule.11/@apply/@class.2"/>
        <association associationName="baseType" source="//@source.2/@hasRule.11/@apply/@class.2" target="//@source.2/@hasRule.11/@apply/@class.3"/>
        <association associationName="typeDef" source="//@source.2/@hasRule.11/@apply/@class.3" target="//@source.2/@hasRule.11/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.11/@apply/@class.0" sourceClass="//@source.2/@hasRule.11/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.11/@apply/@class.1" sourceClass="//@source.2/@hasRule.11/@match.0/@class.1"/>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule"/>
      </match>
      <apply>
        <class packageName="CModel" className="ImplementationModule">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ImplementationModule"/>
          </attribute>
        </class>
        <class packageName="CModel" className="FunctionPrototype">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ProvidedPortFunctionPrototype"/>
          </attribute>
        </class>
        <association associationName="contents" source="//@source.2/@hasRule.12/@apply/@class.0" target="//@source.2/@hasRule.12/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.12/@apply/@class.0" sourceClass="//@source.2/@hasRule.12/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.12/@apply/@class.1" sourceClass="//@source.2/@hasRule.12/@match.0/@class.0"/>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Operation"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="VoidType"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="type" source="//@source.2/@hasRule.13/@match.0/@class.0" target="//@source.2/@hasRule.13/@match.0/@class.1"/>
      </match>
      <apply>
        <class packageName="CModel" className="FunctionPrototype">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ProvidedPortFunctionPrototype"/>
          </attribute>
        </class>
        <class packageName="CModel" className="VoidType"/>
        <association associationName="type" source="//@source.2/@hasRule.13/@apply/@class.0" target="//@source.2/@hasRule.13/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.13/@apply/@class.0" sourceClass="//@source.2/@hasRule.13/@match.0/@class.0"/>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Operation"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="StringType"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="type" source="//@source.2/@hasRule.14/@match.0/@class.0" target="//@source.2/@hasRule.14/@match.0/@class.1"/>
      </match>
      <apply>
        <class packageName="CModel" className="FunctionPrototype">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ProvidedPortFunctionPrototype"/>
          </attribute>
        </class>
        <class packageName="CModel" className="StringType"/>
        <association associationName="type" source="//@source.2/@hasRule.14/@apply/@class.0" target="//@source.2/@hasRule.14/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.14/@apply/@class.0" sourceClass="//@source.2/@hasRule.14/@match.0/@class.0"/>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Operation"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="OperationParameter">
          <attribute attributeName="name"/>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="parameters" source="//@source.2/@hasRule.15/@match.0/@class.0" target="//@source.2/@hasRule.15/@match.0/@class.1"/>
      </match>
      <apply>
        <class packageName="CModel" className="FunctionPrototype">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ProvidedPortFunctionPrototype"/>
          </attribute>
        </class>
        <class packageName="CModel" className="Argument">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ProvidedPortFunctionPrototypeArgument"/>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:AttributeRef" attributeRef="//@source.2/@hasRule.15/@match.0/@class.1/@attribute.0"/>
          </attribute>
        </class>
        <association associationName="arguments" source="//@source.2/@hasRule.15/@apply/@class.0" target="//@source.2/@hasRule.15/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.15/@apply/@class.0" sourceClass="//@source.2/@hasRule.15/@match.0/@class.0"/>
    </hasRule>
  </source>
  <source xsi:type="dsltrans:Sequential" description="Header contents: Main declarations" previousSource="//@source.2" outputFilePathURI="model/ComponentsSampleInC.xmi">
    <metaModelId metaModelURI="model/C.ecore" metaModelName="CModel.CModel"/>
    <hasRule description="create void* arg type in struct">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Operation"/>
      </match>
      <apply>
        <class packageName="CModel" className="PointerType">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="InstancePointer"/>
          </attribute>
        </class>
        <class packageName="CModel" className="FunctionRefType">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="FunctionRefType"/>
          </attribute>
        </class>
        <association associationName="argTypes" source="//@source.3/@hasRule.0/@apply/@class.1" target="//@source.3/@hasRule.0/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.0/@apply/@class.0" sourceClass="//@source.3/@hasRule.0/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.0/@apply/@class.1" sourceClass="//@source.3/@hasRule.0/@match.0/@class.0"/>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="StringType"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="OperationParameter"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="type" source="//@source.3/@hasRule.1/@match.0/@class.1" target="//@source.3/@hasRule.1/@match.0/@class.0"/>
      </match>
      <apply>
        <class packageName="CModel" className="StringType"/>
        <class packageName="CModel" className="Argument">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ProvidedPortFunctionPrototypeArgument"/>
          </attribute>
        </class>
        <association associationName="type" source="//@source.3/@hasRule.1/@apply/@class.1" target="//@source.3/@hasRule.1/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.1/@apply/@class.1" sourceClass="//@source.3/@hasRule.1/@match.0/@class.1"/>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="VoidType"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="OperationParameter"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="type" source="//@source.3/@hasRule.2/@match.0/@class.1" target="//@source.3/@hasRule.2/@match.0/@class.0"/>
      </match>
      <apply>
        <class packageName="CModel" className="VoidType"/>
        <class packageName="CModel" className="Argument">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ProvidedPortFunctionPrototypeArgument"/>
          </attribute>
        </class>
        <association associationName="type" source="//@source.3/@hasRule.2/@apply/@class.1" target="//@source.3/@hasRule.2/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.2/@apply/@class.1" sourceClass="//@source.3/@hasRule.2/@match.0/@class.1"/>
    </hasRule>
    <hasRule>
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Operation"/>
      </match>
      <apply>
        <class packageName="CModel" className="FunctionPrototype">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ProvidedPortFunctionPrototype"/>
          </attribute>
        </class>
        <class packageName="CModel" className="Argument">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ProvidedPortFunctionPrototypeInstanceArgument"/>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="___id"/>
          </attribute>
        </class>
        <class packageName="CModel" className="VoidType"/>
        <class packageName="CModel" className="PointerType"/>
        <association associationName="arguments" source="//@source.3/@hasRule.3/@apply/@class.0" target="//@source.3/@hasRule.3/@apply/@class.1"/>
        <association associationName="type" source="//@source.3/@hasRule.3/@apply/@class.1" target="//@source.3/@hasRule.3/@apply/@class.3"/>
        <association associationName="baseType" source="//@source.3/@hasRule.3/@apply/@class.3" target="//@source.3/@hasRule.3/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.3/@apply/@class.0" sourceClass="//@source.3/@hasRule.3/@match.0/@class.0"/>
    </hasRule>
  </source>
  <source xsi:type="dsltrans:Sequential" description="C File contents: protype and global vars declarations" previousSource="//@source.3" outputFilePathURI="model/ComponentsSampleInC.xmi">
    <metaModelId metaModelURI="model/C.ecore" metaModelName="CModel.CModel"/>
    <hasRule description="create blockexpr_main_2 prototype">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Function">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="main"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Int32Type"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.4/@hasRule.0/@match.0/@class.0" target="//@source.4/@hasRule.0/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="type" source="//@source.4/@hasRule.0/@match.0/@class.1" target="//@source.4/@hasRule.0/@match.0/@class.2"/>
      </match>
      <apply>
        <class packageName="CModel" className="ImplementationModule">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ImplementationModule"/>
          </attribute>
        </class>
        <class packageName="CModel" className="FunctionPrototype">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.4/@hasRule.0/@match.0/@class.0/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Atom" value="_blockexpr_main_2"/>
            </attributeValue>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="Main2Prototype"/>
          </attribute>
        </class>
        <class packageName="CModel" className="VoidType"/>
        <association associationName="contents" source="//@source.4/@hasRule.0/@apply/@class.0" target="//@source.4/@hasRule.0/@apply/@class.1"/>
        <association associationName="type" source="//@source.4/@hasRule.0/@apply/@class.1" target="//@source.4/@hasRule.0/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.0/@apply/@class.0" sourceClass="//@source.4/@hasRule.0/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="create instances init prototype">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="InstanceConfiguration">
          <attribute attributeName="name"/>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.4/@hasRule.1/@match.0/@class.0" target="//@source.4/@hasRule.1/@match.0/@class.1"/>
      </match>
      <apply>
        <class packageName="CModel" className="ImplementationModule">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ImplementationModule"/>
          </attribute>
        </class>
        <class packageName="CModel" className="FunctionPrototype">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.4/@hasRule.1/@match.0/@class.0/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Concat">
                <leftTerm xsi:type="dsltrans:Atom" value="_"/>
                <rightTerm xsi:type="dsltrans:Concat">
                  <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.4/@hasRule.1/@match.0/@class.1/@attribute.0"/>
                  <rightTerm xsi:type="dsltrans:Atom" value="__init"/>
                </rightTerm>
              </rightTerm>
            </attributeValue>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="InstanceConfigurationInit"/>
          </attribute>
        </class>
        <class packageName="CModel" className="VoidType" groupName=""/>
        <association associationName="contents" source="//@source.4/@hasRule.1/@apply/@class.0" target="//@source.4/@hasRule.1/@apply/@class.1"/>
        <association associationName="type" source="//@source.4/@hasRule.1/@apply/@class.1" target="//@source.4/@hasRule.1/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.1/@apply/@class.0" sourceClass="//@source.4/@hasRule.1/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="create instance components wire prototype">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="InstanceConfiguration">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ComponentInstance">
          <attribute attributeName="name"/>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.4/@hasRule.2/@match.0/@class.0" target="//@source.4/@hasRule.2/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.4/@hasRule.2/@match.0/@class.1" target="//@source.4/@hasRule.2/@match.0/@class.2"/>
      </match>
      <apply>
        <class packageName="CModel" className="ImplementationModule">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ImplementationModule"/>
          </attribute>
        </class>
        <class packageName="CModel" className="FunctionPrototype">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.4/@hasRule.2/@match.0/@class.0/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Concat">
                <leftTerm xsi:type="dsltrans:Atom" value="_"/>
                <rightTerm xsi:type="dsltrans:Concat">
                  <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.4/@hasRule.2/@match.0/@class.1/@attribute.0"/>
                  <rightTerm xsi:type="dsltrans:Concat">
                    <leftTerm xsi:type="dsltrans:Atom" value="_"/>
                    <rightTerm xsi:type="dsltrans:Concat">
                      <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.4/@hasRule.2/@match.0/@class.2/@attribute.0"/>
                      <rightTerm xsi:type="dsltrans:Atom" value="__wire"/>
                    </rightTerm>
                  </rightTerm>
                </rightTerm>
              </rightTerm>
            </attributeValue>
          </attribute>
          <attribute attributeName="">
            <attributeValue xsi:type="dsltrans:Atom" value="WireFunctionPrototype"/>
          </attribute>
        </class>
        <class packageName="CModel" className="VoidType" groupName=""/>
        <association associationName="contents" source="//@source.4/@hasRule.2/@apply/@class.0" target="//@source.4/@hasRule.2/@apply/@class.1"/>
        <association associationName="type" source="//@source.4/@hasRule.2/@apply/@class.1" target="//@source.4/@hasRule.2/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.2/@apply/@class.0" sourceClass="//@source.4/@hasRule.2/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="create instance component provided port struct declaration">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="InstanceConfiguration"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ComponentInstance">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="AtomicComponent"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ProvidedPort"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ClientServerInterface">
          <attribute attributeName="name"/>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.4/@hasRule.3/@match.0/@class.0" target="//@source.4/@hasRule.3/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.4/@hasRule.3/@match.0/@class.1" target="//@source.4/@hasRule.3/@match.0/@class.2"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="component" source="//@source.4/@hasRule.3/@match.0/@class.2" target="//@source.4/@hasRule.3/@match.0/@class.3"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.4/@hasRule.3/@match.0/@class.3" target="//@source.4/@hasRule.3/@match.0/@class.4"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="intf" source="//@source.4/@hasRule.3/@match.0/@class.4" target="//@source.4/@hasRule.3/@match.0/@class.5"/>
      </match>
      <apply>
        <class packageName="CModel" className="ImplementationModule">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ImplementationModule"/>
          </attribute>
        </class>
        <class packageName="CModel" className="GlobalVariableDeclaration">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.4/@hasRule.3/@match.0/@class.0/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Concat">
                <leftTerm xsi:type="dsltrans:Atom" value="_"/>
                <rightTerm xsi:type="dsltrans:Concat">
                  <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.4/@hasRule.3/@match.0/@class.2/@attribute.0"/>
                  <rightTerm xsi:type="dsltrans:Concat">
                    <leftTerm xsi:type="dsltrans:Atom" value="_"/>
                    <rightTerm xsi:type="dsltrans:Concat">
                      <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.4/@hasRule.3/@match.0/@class.5/@attribute.0"/>
                      <rightTerm xsi:type="dsltrans:Atom" value="__ops"/>
                    </rightTerm>
                  </rightTerm>
                </rightTerm>
              </rightTerm>
            </attributeValue>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="GlobalVarOps"/>
          </attribute>
        </class>
        <class packageName="CModel" className="TypeDef">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="TypeDefInterfaceStruct"/>
          </attribute>
        </class>
        <class packageName="CModel" className="TypeDefType"/>
        <association associationName="contents" source="//@source.4/@hasRule.3/@apply/@class.0" target="//@source.4/@hasRule.3/@apply/@class.1"/>
        <association associationName="type" source="//@source.4/@hasRule.3/@apply/@class.1" target="//@source.4/@hasRule.3/@apply/@class.3"/>
        <association associationName="typeDef" source="//@source.4/@hasRule.3/@apply/@class.3" target="//@source.4/@hasRule.3/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.3/@apply/@class.0" sourceClass="//@source.4/@hasRule.3/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.3/@apply/@class.2" sourceClass="//@source.4/@hasRule.3/@match.0/@class.5"/>
    </hasRule>
    <hasRule description="create instance component cdata">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="InstanceConfiguration">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ComponentInstance">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="AtomicComponent"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.4/@hasRule.4/@match.0/@class.0" target="//@source.4/@hasRule.4/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.4/@hasRule.4/@match.0/@class.1" target="//@source.4/@hasRule.4/@match.0/@class.2"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="component" source="//@source.4/@hasRule.4/@match.0/@class.2" target="//@source.4/@hasRule.4/@match.0/@class.3"/>
      </match>
      <apply>
        <class packageName="CModel" className="ImplementationModule">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ImplementationModule"/>
          </attribute>
        </class>
        <class packageName="CModel" className="GlobalVariableDeclaration">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.4/@hasRule.4/@match.0/@class.0/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Concat">
                <leftTerm xsi:type="dsltrans:Atom" value="_"/>
                <rightTerm xsi:type="dsltrans:Concat">
                  <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.4/@hasRule.4/@match.0/@class.1/@attribute.0"/>
                  <rightTerm xsi:type="dsltrans:Concat">
                    <leftTerm xsi:type="dsltrans:Atom" value="_"/>
                    <rightTerm xsi:type="dsltrans:Concat">
                      <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.4/@hasRule.4/@match.0/@class.2/@attribute.0"/>
                      <rightTerm xsi:type="dsltrans:Atom" value="__instance"/>
                    </rightTerm>
                  </rightTerm>
                </rightTerm>
              </rightTerm>
            </attributeValue>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="GlobalComponentInstanceDeclaration"/>
          </attribute>
        </class>
        <class packageName="CModel" className="TypeDef">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="TypeDefComponentStruct"/>
          </attribute>
        </class>
        <class packageName="CModel" className="TypeDefType"/>
        <association associationName="contents" source="//@source.4/@hasRule.4/@apply/@class.0" target="//@source.4/@hasRule.4/@apply/@class.1"/>
        <association associationName="type" source="//@source.4/@hasRule.4/@apply/@class.1" target="//@source.4/@hasRule.4/@apply/@class.3"/>
        <association associationName="typeDef" source="//@source.4/@hasRule.4/@apply/@class.3" target="//@source.4/@hasRule.4/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.4/@apply/@class.0" sourceClass="//@source.4/@hasRule.4/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.4/@apply/@class.2" sourceClass="//@source.4/@hasRule.4/@match.0/@class.3"/>
    </hasRule>
    <hasRule description="create testcase prototype">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="TestCase">
          <attribute attributeName="name"/>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.4/@hasRule.5/@match.0/@class.0" target="//@source.4/@hasRule.5/@match.0/@class.1"/>
      </match>
      <apply>
        <class packageName="CModel" className="ImplementationModule">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ImplementationModule"/>
          </attribute>
        </class>
        <class packageName="CModel" className="FunctionPrototype">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.4/@hasRule.5/@match.0/@class.0/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Concat">
                <leftTerm xsi:type="dsltrans:Atom" value="_"/>
                <rightTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.4/@hasRule.5/@match.0/@class.1/@attribute.0"/>
              </rightTerm>
            </attributeValue>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="TestCasePrototype"/>
          </attribute>
        </class>
        <class packageName="CModel" className="VoidType"/>
        <association associationName="contents" source="//@source.4/@hasRule.5/@apply/@class.0" target="//@source.4/@hasRule.5/@apply/@class.1"/>
        <association associationName="type" source="//@source.4/@hasRule.5/@apply/@class.1" target="//@source.4/@hasRule.5/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.5/@apply/@class.0" sourceClass="//@source.4/@hasRule.5/@match.0/@class.0"/>
    </hasRule>
  </source>
  <source xsi:type="dsltrans:Sequential" description="C File contents: component related functions declarations" previousSource="//@source.4" outputFilePathURI="model/ComponentsSampleInC.xmi">
    <metaModelId metaModelURI="model/C.ecore" metaModelName="CModel.CModel"/>
    <hasRule description="create instance components wire">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="InstanceConfiguration">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ComponentInstance">
          <attribute attributeName="name"/>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.5/@hasRule.0/@match.0/@class.0" target="//@source.5/@hasRule.0/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.5/@hasRule.0/@match.0/@class.1" target="//@source.5/@hasRule.0/@match.0/@class.2"/>
      </match>
      <apply>
        <class packageName="CModel" className="ImplementationModule">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ImplementationModule"/>
          </attribute>
        </class>
        <class packageName="CModel" className="Function">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.5/@hasRule.0/@match.0/@class.0/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Concat">
                <leftTerm xsi:type="dsltrans:Atom" value="_"/>
                <rightTerm xsi:type="dsltrans:Concat">
                  <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.5/@hasRule.0/@match.0/@class.1/@attribute.0"/>
                  <rightTerm xsi:type="dsltrans:Concat">
                    <leftTerm xsi:type="dsltrans:Atom" value="_"/>
                    <rightTerm xsi:type="dsltrans:Concat">
                      <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.5/@hasRule.0/@match.0/@class.2/@attribute.0"/>
                      <rightTerm xsi:type="dsltrans:Atom" value="__wire"/>
                    </rightTerm>
                  </rightTerm>
                </rightTerm>
              </rightTerm>
            </attributeValue>
          </attribute>
        </class>
        <class packageName="CModel" className="VoidType" groupName=""/>
        <class packageName="CModel" className="StatementList">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="WireFunctionStatements"/>
          </attribute>
        </class>
        <association associationName="contents" source="//@source.5/@hasRule.0/@apply/@class.0" target="//@source.5/@hasRule.0/@apply/@class.1"/>
        <association associationName="type" source="//@source.5/@hasRule.0/@apply/@class.1" target="//@source.5/@hasRule.0/@apply/@class.2"/>
        <association associationName="body" source="//@source.5/@hasRule.0/@apply/@class.1" target="//@source.5/@hasRule.0/@apply/@class.3"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.0/@apply/@class.0" sourceClass="//@source.5/@hasRule.0/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="create instances init function">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="InstanceConfiguration">
          <attribute attributeName="name"/>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.5/@hasRule.1/@match.0/@class.0" target="//@source.5/@hasRule.1/@match.0/@class.1"/>
      </match>
      <apply>
        <class packageName="CModel" className="ImplementationModule">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ImplementationModule"/>
          </attribute>
        </class>
        <class packageName="CModel" className="Function">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.5/@hasRule.1/@match.0/@class.0/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Concat">
                <leftTerm xsi:type="dsltrans:Atom" value="_"/>
                <rightTerm xsi:type="dsltrans:Concat">
                  <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.5/@hasRule.1/@match.0/@class.1/@attribute.0"/>
                  <rightTerm xsi:type="dsltrans:Atom" value="__init"/>
                </rightTerm>
              </rightTerm>
            </attributeValue>
          </attribute>
        </class>
        <class packageName="CModel" className="StatementList">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="InstancesInitFunctionBody"/>
          </attribute>
        </class>
        <association associationName="contents" source="//@source.5/@hasRule.1/@apply/@class.0" target="//@source.5/@hasRule.1/@apply/@class.1"/>
        <association associationName="body" source="//@source.5/@hasRule.1/@apply/@class.1" target="//@source.5/@hasRule.1/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.1/@apply/@class.0" sourceClass="//@source.5/@hasRule.1/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="create testcase function">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="TestCase">
          <attribute attributeName="name"/>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.5/@hasRule.2/@match.0/@class.0" target="//@source.5/@hasRule.2/@match.0/@class.1"/>
      </match>
      <apply>
        <class packageName="CModel" className="ImplementationModule">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ImplementationModule"/>
          </attribute>
        </class>
        <class packageName="CModel" className="Function">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.5/@hasRule.2/@match.0/@class.0/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Concat">
                <leftTerm xsi:type="dsltrans:Atom" value="_"/>
                <rightTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.5/@hasRule.2/@match.0/@class.1/@attribute.0"/>
              </rightTerm>
            </attributeValue>
          </attribute>
        </class>
        <class packageName="CModel" className="VoidType"/>
        <class packageName="CModel" className="StatementList">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="TestCaseFunctionStatements"/>
          </attribute>
        </class>
        <association associationName="contents" source="//@source.5/@hasRule.2/@apply/@class.0" target="//@source.5/@hasRule.2/@apply/@class.1"/>
        <association associationName="type" source="//@source.5/@hasRule.2/@apply/@class.1" target="//@source.5/@hasRule.2/@apply/@class.2"/>
        <association associationName="body" source="//@source.5/@hasRule.2/@apply/@class.1" target="//@source.5/@hasRule.2/@apply/@class.3"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.2/@apply/@class.0" sourceClass="//@source.5/@hasRule.2/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="create blockexpr_main_2 fand main functions">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ImplementationModule">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Function">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="main"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Int32Type"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.5/@hasRule.3/@match.0/@class.0" target="//@source.5/@hasRule.3/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="type" source="//@source.5/@hasRule.3/@match.0/@class.1" target="//@source.5/@hasRule.3/@match.0/@class.2"/>
      </match>
      <apply>
        <class packageName="CModel" className="ImplementationModule">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ImplementationModule"/>
          </attribute>
        </class>
        <class packageName="CModel" className="Function">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.5/@hasRule.3/@match.0/@class.0/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Atom" value="_blockexpr_main_2"/>
            </attributeValue>
          </attribute>
        </class>
        <class packageName="CModel" className="VoidType"/>
        <class packageName="CModel" className="StatementList">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="Main2Body"/>
          </attribute>
        </class>
        <class packageName="CModel" className="Function">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="main"/>
          </attribute>
        </class>
        <class packageName="CModel" className="StatementList">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="MainBody"/>
          </attribute>
        </class>
        <class packageName="CModel" className="Int32Type"/>
        <class packageName="CModel" className="ExpressionStatement"/>
        <class packageName="CModel" className="FunctionCall"/>
        <class packageName="CModel" className="FunctionPrototype">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="Main2Prototype"/>
          </attribute>
        </class>
        <association associationName="contents" source="//@source.5/@hasRule.3/@apply/@class.0" target="//@source.5/@hasRule.3/@apply/@class.1"/>
        <association associationName="type" source="//@source.5/@hasRule.3/@apply/@class.1" target="//@source.5/@hasRule.3/@apply/@class.2"/>
        <association associationName="body" source="//@source.5/@hasRule.3/@apply/@class.1" target="//@source.5/@hasRule.3/@apply/@class.3"/>
        <association associationName="contents" source="//@source.5/@hasRule.3/@apply/@class.0" target="//@source.5/@hasRule.3/@apply/@class.4"/>
        <association associationName="type" source="//@source.5/@hasRule.3/@apply/@class.4" target="//@source.5/@hasRule.3/@apply/@class.6"/>
        <association associationName="body" source="//@source.5/@hasRule.3/@apply/@class.4" target="//@source.5/@hasRule.3/@apply/@class.5"/>
        <association associationName="statements" source="//@source.5/@hasRule.3/@apply/@class.5" target="//@source.5/@hasRule.3/@apply/@class.7"/>
        <association associationName="expr" source="//@source.5/@hasRule.3/@apply/@class.7" target="//@source.5/@hasRule.3/@apply/@class.8"/>
        <association associationName="function" source="//@source.5/@hasRule.3/@apply/@class.8" target="//@source.5/@hasRule.3/@apply/@class.9"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.3/@apply/@class.0" sourceClass="//@source.5/@hasRule.3/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.3/@apply/@class.9" sourceClass="//@source.5/@hasRule.3/@match.0/@class.1"/>
    </hasRule>
  </source>
  <source xsi:type="dsltrans:Sequential" description="C File contents: component related functions implementation" previousSource="//@source.5" outputFilePathURI="model/ComponentsSampleInC.xmi">
    <metaModelId metaModelURI="model/C.ecore" metaModelName="CModel.CModel"/>
    <hasRule description="create instance components wire body">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ComponentInstance"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="AtomicComponent"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ProvidedPort"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ClientServerInterface"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Operation"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="component" source="//@source.6/@hasRule.0/@match.0/@class.0" target="//@source.6/@hasRule.0/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.6/@hasRule.0/@match.0/@class.1" target="//@source.6/@hasRule.0/@match.0/@class.2"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="intf" source="//@source.6/@hasRule.0/@match.0/@class.2" target="//@source.6/@hasRule.0/@match.0/@class.3"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.6/@hasRule.0/@match.0/@class.3" target="//@source.6/@hasRule.0/@match.0/@class.4"/>
      </match>
      <apply>
        <class packageName="CModel" className="StatementList">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="WireFunctionStatements"/>
          </attribute>
        </class>
        <class packageName="CModel" className="GlobalVariableDeclaration">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="GlobalVarOps"/>
          </attribute>
        </class>
        <class packageName="CModel" className="ExpressionStatement" groupName=""/>
        <class packageName="CModel" className="AssignmentExpr" groupName=""/>
        <class packageName="CModel" className="GenericDotExpression" groupName=""/>
        <class packageName="CModel" className="ReferenceExpr" groupName=""/>
        <class packageName="CModel" className="GlobalVarRef" groupName=""/>
        <class packageName="CModel" className="GenericMemberRef" groupName=""/>
        <class packageName="CModel" className="CFunctionPointerStructMember">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="CFunctionPointerStructMember"/>
          </attribute>
        </class>
        <class packageName="CModel" className="FunctionPrototype">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ProvidedPortFunctionPrototype"/>
          </attribute>
        </class>
        <class packageName="CModel" className="FunctionRefExpr" groupName=""/>
        <association associationName="statements" source="//@source.6/@hasRule.0/@apply/@class.0" target="//@source.6/@hasRule.0/@apply/@class.2"/>
        <association associationName="expr" source="//@source.6/@hasRule.0/@apply/@class.2" target="//@source.6/@hasRule.0/@apply/@class.3"/>
        <association associationName="left" source="//@source.6/@hasRule.0/@apply/@class.3" target="//@source.6/@hasRule.0/@apply/@class.4"/>
        <association associationName="right" source="//@source.6/@hasRule.0/@apply/@class.3" target="//@source.6/@hasRule.0/@apply/@class.5"/>
        <association associationName="expression" source="//@source.6/@hasRule.0/@apply/@class.4" target="//@source.6/@hasRule.0/@apply/@class.6"/>
        <association associationName="target" source="//@source.6/@hasRule.0/@apply/@class.4" target="//@source.6/@hasRule.0/@apply/@class.7"/>
        <association associationName="var" source="//@source.6/@hasRule.0/@apply/@class.6" target="//@source.6/@hasRule.0/@apply/@class.1"/>
        <association associationName="member" source="//@source.6/@hasRule.0/@apply/@class.7" target="//@source.6/@hasRule.0/@apply/@class.8"/>
        <association associationName="expression" source="//@source.6/@hasRule.0/@apply/@class.5" target="//@source.6/@hasRule.0/@apply/@class.10"/>
        <association associationName="function" source="//@source.6/@hasRule.0/@apply/@class.10" target="//@source.6/@hasRule.0/@apply/@class.9"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.0/@apply/@class.0" sourceClass="//@source.6/@hasRule.0/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.0/@apply/@class.1" sourceClass="//@source.6/@hasRule.0/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.0/@apply/@class.8" sourceClass="//@source.6/@hasRule.0/@match.0/@class.4"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.0/@apply/@class.9" sourceClass="//@source.6/@hasRule.0/@match.0/@class.2"/>
    </hasRule>
    <hasRule description="create instance components wire body">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ComponentInstance"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="AtomicComponent"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="RequiredPort"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="InstanceConfiguration"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="AssemblyConnector"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="InstancePortRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="InstancePortRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ComponentInstance"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="AtomicComponent"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ProvidedPort"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ClientServerInterface"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="component" source="//@source.6/@hasRule.1/@match.0/@class.0" target="//@source.6/@hasRule.1/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.6/@hasRule.1/@match.0/@class.1" target="//@source.6/@hasRule.1/@match.0/@class.2"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.6/@hasRule.1/@match.0/@class.3" target="//@source.6/@hasRule.1/@match.0/@class.0"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.6/@hasRule.1/@match.0/@class.3" target="//@source.6/@hasRule.1/@match.0/@class.4"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="source" source="//@source.6/@hasRule.1/@match.0/@class.4" target="//@source.6/@hasRule.1/@match.0/@class.5"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="instance" source="//@source.6/@hasRule.1/@match.0/@class.5" target="//@source.6/@hasRule.1/@match.0/@class.0"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="port" source="//@source.6/@hasRule.1/@match.0/@class.5" target="//@source.6/@hasRule.1/@match.0/@class.2"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.6/@hasRule.1/@match.0/@class.3" target="//@source.6/@hasRule.1/@match.0/@class.7"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="instance" source="//@source.6/@hasRule.1/@match.0/@class.6" target="//@source.6/@hasRule.1/@match.0/@class.7"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="target" source="//@source.6/@hasRule.1/@match.0/@class.4" target="//@source.6/@hasRule.1/@match.0/@class.6"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="component" source="//@source.6/@hasRule.1/@match.0/@class.7" target="//@source.6/@hasRule.1/@match.0/@class.8"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.6/@hasRule.1/@match.0/@class.8" target="//@source.6/@hasRule.1/@match.0/@class.9"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="intf" source="//@source.6/@hasRule.1/@match.0/@class.9" target="//@source.6/@hasRule.1/@match.0/@class.10"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="intf" source="//@source.6/@hasRule.1/@match.0/@class.2" target="//@source.6/@hasRule.1/@match.0/@class.10"/>
      </match>
      <apply>
        <class packageName="CModel" className="StatementList">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="WireFunctionStatements"/>
          </attribute>
        </class>
        <class packageName="CModel" className="GlobalVariableDeclaration">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="GlobalComponentInstanceDeclaration"/>
          </attribute>
        </class>
        <class packageName="CModel" className="ExpressionStatement" groupName=""/>
        <class packageName="CModel" className="AssignmentExpr" groupName=""/>
        <class packageName="CModel" className="GenericDotExpression" groupName=""/>
        <class packageName="CModel" className="ReferenceExpr" groupName=""/>
        <class packageName="CModel" className="GlobalVarRef" groupName=""/>
        <class packageName="CModel" className="GenericMemberRef" groupName=""/>
        <class packageName="CModel" className="Member">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="RequiredPort_port"/>
          </attribute>
        </class>
        <class packageName="CModel" className="GlobalVariableDeclaration">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="GlobalComponentInstanceDeclaration"/>
          </attribute>
        </class>
        <class packageName="CModel" className="GlobalVarRef" groupName=""/>
        <class packageName="CModel" className="ExpressionStatement" groupName=""/>
        <class packageName="CModel" className="AssignmentExpr" groupName=""/>
        <class packageName="CModel" className="GenericDotExpression" groupName=""/>
        <class packageName="CModel" className="GlobalVarRef" groupName=""/>
        <class packageName="CModel" className="GenericMemberRef" groupName=""/>
        <class packageName="CModel" className="Member">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="RequiredPort_ops"/>
          </attribute>
        </class>
        <class packageName="CModel" className="ReferenceExpr" groupName=""/>
        <class packageName="CModel" className="GlobalVarRef" groupName=""/>
        <class packageName="CModel" className="GlobalVariableDeclaration">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="GlobalVarOps"/>
          </attribute>
        </class>
        <association associationName="statements" source="//@source.6/@hasRule.1/@apply/@class.0" target="//@source.6/@hasRule.1/@apply/@class.2"/>
        <association associationName="expr" source="//@source.6/@hasRule.1/@apply/@class.2" target="//@source.6/@hasRule.1/@apply/@class.3"/>
        <association associationName="left" source="//@source.6/@hasRule.1/@apply/@class.3" target="//@source.6/@hasRule.1/@apply/@class.4"/>
        <association associationName="right" source="//@source.6/@hasRule.1/@apply/@class.3" target="//@source.6/@hasRule.1/@apply/@class.5"/>
        <association associationName="expression" source="//@source.6/@hasRule.1/@apply/@class.4" target="//@source.6/@hasRule.1/@apply/@class.6"/>
        <association associationName="target" source="//@source.6/@hasRule.1/@apply/@class.4" target="//@source.6/@hasRule.1/@apply/@class.7"/>
        <association associationName="var" source="//@source.6/@hasRule.1/@apply/@class.6" target="//@source.6/@hasRule.1/@apply/@class.1"/>
        <association associationName="member" source="//@source.6/@hasRule.1/@apply/@class.7" target="//@source.6/@hasRule.1/@apply/@class.8"/>
        <association associationName="expression" source="//@source.6/@hasRule.1/@apply/@class.5" target="//@source.6/@hasRule.1/@apply/@class.10"/>
        <association associationName="var" source="//@source.6/@hasRule.1/@apply/@class.10" target="//@source.6/@hasRule.1/@apply/@class.9"/>
        <association associationName="statements" source="//@source.6/@hasRule.1/@apply/@class.0" target="//@source.6/@hasRule.1/@apply/@class.11"/>
        <association associationName="expr" source="//@source.6/@hasRule.1/@apply/@class.11" target="//@source.6/@hasRule.1/@apply/@class.12"/>
        <association associationName="left" source="//@source.6/@hasRule.1/@apply/@class.12" target="//@source.6/@hasRule.1/@apply/@class.13"/>
        <association associationName="expression" source="//@source.6/@hasRule.1/@apply/@class.13" target="//@source.6/@hasRule.1/@apply/@class.14"/>
        <association associationName="var" source="//@source.6/@hasRule.1/@apply/@class.14" target="//@source.6/@hasRule.1/@apply/@class.1"/>
        <association associationName="target" source="//@source.6/@hasRule.1/@apply/@class.13" target="//@source.6/@hasRule.1/@apply/@class.15"/>
        <association associationName="member" source="//@source.6/@hasRule.1/@apply/@class.15" target="//@source.6/@hasRule.1/@apply/@class.16"/>
        <association associationName="right" source="//@source.6/@hasRule.1/@apply/@class.12" target="//@source.6/@hasRule.1/@apply/@class.17"/>
        <association associationName="expression" source="//@source.6/@hasRule.1/@apply/@class.17" target="//@source.6/@hasRule.1/@apply/@class.18"/>
        <association associationName="var" source="//@source.6/@hasRule.1/@apply/@class.18" target="//@source.6/@hasRule.1/@apply/@class.19"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.1/@apply/@class.0" sourceClass="//@source.6/@hasRule.1/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.1/@apply/@class.1" sourceClass="//@source.6/@hasRule.1/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.1/@apply/@class.8" sourceClass="//@source.6/@hasRule.1/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.1/@apply/@class.9" sourceClass="//@source.6/@hasRule.1/@match.0/@class.7"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.1/@apply/@class.16" sourceClass="//@source.6/@hasRule.1/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.1/@apply/@class.19" sourceClass="//@source.6/@hasRule.1/@match.0/@class.9"/>
    </hasRule>
    <hasRule description="create instances init function">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="InstanceConfiguration"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ComponentInstance"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.6/@hasRule.2/@match.0/@class.0" target="//@source.6/@hasRule.2/@match.0/@class.1"/>
      </match>
      <apply>
        <class packageName="CModel" className="StatementList">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="InstancesInitFunctionBody"/>
          </attribute>
        </class>
        <class packageName="CModel" className="FunctionPrototype">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="WireFunctionPrototype"/>
          </attribute>
        </class>
        <class packageName="CModel" className="ExpressionStatement"/>
        <class packageName="CModel" className="FunctionCall"/>
        <association associationName="statements" source="//@source.6/@hasRule.2/@apply/@class.0" target="//@source.6/@hasRule.2/@apply/@class.2"/>
        <association associationName="expr" source="//@source.6/@hasRule.2/@apply/@class.2" target="//@source.6/@hasRule.2/@apply/@class.3"/>
        <association associationName="function" source="//@source.6/@hasRule.2/@apply/@class.3" target="//@source.6/@hasRule.2/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.2/@apply/@class.0" sourceClass="//@source.6/@hasRule.2/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.2/@apply/@class.1" sourceClass="//@source.6/@hasRule.2/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="call instances init function">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="TestCase"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="StatementList"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="InitializeConfiguration"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="InstanceConfiguration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="body" source="//@source.6/@hasRule.3/@match.0/@class.0" target="//@source.6/@hasRule.3/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="statements" source="//@source.6/@hasRule.3/@match.0/@class.1" target="//@source.6/@hasRule.3/@match.0/@class.2"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="config" source="//@source.6/@hasRule.3/@match.0/@class.2" target="//@source.6/@hasRule.3/@match.0/@class.3"/>
      </match>
      <apply>
        <class packageName="CModel" className="StatementList">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="TestCaseFunctionStatements"/>
          </attribute>
        </class>
        <class packageName="CModel" className="ExpressionStatement"/>
        <class packageName="CModel" className="FunctionCall"/>
        <class packageName="CModel" className="FunctionPrototype">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="InstanceConfigurationInit"/>
          </attribute>
        </class>
        <association associationName="statements" source="//@source.6/@hasRule.3/@apply/@class.0" target="//@source.6/@hasRule.3/@apply/@class.1"/>
        <association associationName="expr" source="//@source.6/@hasRule.3/@apply/@class.1" target="//@source.6/@hasRule.3/@apply/@class.2"/>
        <association associationName="function" source="//@source.6/@hasRule.3/@apply/@class.2" target="//@source.6/@hasRule.3/@apply/@class.3"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.3/@apply/@class.0" sourceClass="//@source.6/@hasRule.3/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.3/@apply/@class.3" sourceClass="//@source.6/@hasRule.3/@match.0/@class.3"/>
    </hasRule>
    <hasRule description="call instances init function">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="TestCase"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="StatementList"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ExpressionStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="PortAdapterOpCallExpr"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="PortAdapterRefExpr"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="PortAdapter"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Operation"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="AdapterInstancePortRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ComponentInstance"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ProvidedPort"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ClientServerInterface"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="body" source="//@source.6/@hasRule.4/@match.0/@class.0" target="//@source.6/@hasRule.4/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="statements" source="//@source.6/@hasRule.4/@match.0/@class.1" target="//@source.6/@hasRule.4/@match.0/@class.2"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="expr" source="//@source.6/@hasRule.4/@match.0/@class.2" target="//@source.6/@hasRule.4/@match.0/@class.3"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="expression" source="//@source.6/@hasRule.4/@match.0/@class.3" target="//@source.6/@hasRule.4/@match.0/@class.4"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="portAdater" source="//@source.6/@hasRule.4/@match.0/@class.4" target="//@source.6/@hasRule.4/@match.0/@class.5"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="operation" source="//@source.6/@hasRule.4/@match.0/@class.3" target="//@source.6/@hasRule.4/@match.0/@class.6"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="portRef" source="//@source.6/@hasRule.4/@match.0/@class.5" target="//@source.6/@hasRule.4/@match.0/@class.7"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="instance" source="//@source.6/@hasRule.4/@match.0/@class.7" target="//@source.6/@hasRule.4/@match.0/@class.8"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="port" source="//@source.6/@hasRule.4/@match.0/@class.7" target="//@source.6/@hasRule.4/@match.0/@class.9"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="intf" source="//@source.6/@hasRule.4/@match.0/@class.9" target="//@source.6/@hasRule.4/@match.0/@class.10"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="contents" source="//@source.6/@hasRule.4/@match.0/@class.10" target="//@source.6/@hasRule.4/@match.0/@class.6"/>
      </match>
      <apply>
        <class packageName="CModel" className="StatementList">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="TestCaseFunctionStatements"/>
          </attribute>
        </class>
        <class packageName="CModel" className="ExpressionStatement"/>
        <class packageName="CModel" className="FunctionCall"/>
        <class packageName="CModel" className="FunctionPrototype">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ProvidedPortFunctionPrototype"/>
          </attribute>
        </class>
        <class packageName="CModel" className="ReferenceExpr"/>
        <class packageName="CModel" className="GlobalVarRef"/>
        <class packageName="CModel" className="GlobalVariableDeclaration">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="GlobalComponentInstanceDeclaration"/>
          </attribute>
        </class>
        <association associationName="statements" source="//@source.6/@hasRule.4/@apply/@class.0" target="//@source.6/@hasRule.4/@apply/@class.1"/>
        <association associationName="expr" source="//@source.6/@hasRule.4/@apply/@class.1" target="//@source.6/@hasRule.4/@apply/@class.2"/>
        <association associationName="function" source="//@source.6/@hasRule.4/@apply/@class.2" target="//@source.6/@hasRule.4/@apply/@class.3"/>
        <association associationName="actuals" source="//@source.6/@hasRule.4/@apply/@class.2" target="//@source.6/@hasRule.4/@apply/@class.4"/>
        <association associationName="expression" source="//@source.6/@hasRule.4/@apply/@class.4" target="//@source.6/@hasRule.4/@apply/@class.5"/>
        <association associationName="var" source="//@source.6/@hasRule.4/@apply/@class.5" target="//@source.6/@hasRule.4/@apply/@class.6"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.4/@apply/@class.0" sourceClass="//@source.6/@hasRule.4/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.4/@apply/@class.3" sourceClass="//@source.6/@hasRule.4/@match.0/@class.9"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.4/@apply/@class.6" sourceClass="//@source.6/@hasRule.4/@match.0/@class.8"/>
    </hasRule>
    <hasRule description="main and main_2 body">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="StatementList"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ReturnStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="ExecuteTestExpression"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Function">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="main"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="TestCaseRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="TestCase"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="body" source="//@source.6/@hasRule.5/@match.0/@class.3" target="//@source.6/@hasRule.5/@match.0/@class.0"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="statements" source="//@source.6/@hasRule.5/@match.0/@class.0" target="//@source.6/@hasRule.5/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="expression" source="//@source.6/@hasRule.5/@match.0/@class.1" target="//@source.6/@hasRule.5/@match.0/@class.2"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="tests" source="//@source.6/@hasRule.5/@match.0/@class.2" target="//@source.6/@hasRule.5/@match.0/@class.4"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="testcase" source="//@source.6/@hasRule.5/@match.0/@class.4" target="//@source.6/@hasRule.5/@match.0/@class.5"/>
      </match>
      <apply>
        <class packageName="CModel" className="StatementList">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="Main2Body"/>
          </attribute>
        </class>
        <class packageName="CModel" className="ExpressionStatement"/>
        <class packageName="CModel" className="FunctionCall"/>
        <class packageName="CModel" className="FunctionPrototype">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="TestCasePrototype"/>
          </attribute>
        </class>
        <association associationName="statements" source="//@source.6/@hasRule.5/@apply/@class.0" target="//@source.6/@hasRule.5/@apply/@class.1"/>
        <association associationName="expr" source="//@source.6/@hasRule.5/@apply/@class.1" target="//@source.6/@hasRule.5/@apply/@class.2"/>
        <association associationName="function" source="//@source.6/@hasRule.5/@apply/@class.2" target="//@source.6/@hasRule.5/@apply/@class.3"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.5/@apply/@class.0" sourceClass="//@source.6/@hasRule.5/@match.0/@class.3"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.5/@apply/@class.3" sourceClass="//@source.6/@hasRule.5/@match.0/@class.5"/>
    </hasRule>
  </source>
  <source xsi:type="dsltrans:Sequential" description="C file contents" previousSource="//@source.6" outputFilePathURI="model/ComponentsSampleInC.xmi">
    <metaModelId metaModelURI="model/C.ecore" metaModelName="CModel.CModel"/>
    <hasRule description="main return 0">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" packageName="Module" className="Function">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="main"/>
          </attribute>
        </class>
      </match>
      <apply>
        <class packageName="CModel" className="StatementList">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="MainBody"/>
          </attribute>
        </class>
        <class packageName="CModel" className="ReturnStatement"/>
        <class packageName="CModel" className="NumberLiteral">
          <attribute attributeName="value">
            <attributeValue xsi:type="dsltrans:Atom" value="0"/>
          </attribute>
        </class>
        <association associationName="statements" source="//@source.7/@hasRule.0/@apply/@class.0" target="//@source.7/@hasRule.0/@apply/@class.1"/>
        <association associationName="expression" source="//@source.7/@hasRule.0/@apply/@class.1" target="//@source.7/@hasRule.0/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.7/@hasRule.0/@apply/@class.0" sourceClass="//@source.7/@hasRule.0/@match.0/@class.0"/>
    </hasRule>
  </source>
</dsltrans:TransformationModel>
